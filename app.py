from flask import Flask, render_template, request, jsonify, send_file
import yt_dlp
import os
import platform
import tempfile
import random
import re
import requests
from datetime import datetime, time
from http.cookiejar import MozillaCookieJar

app = Flask(__name__)

# YouTube consent cookie (helps bypass some restrictions)
YOUTUBE_CONSENT = 'YES+cb.20240318-17-p0.en-GB+FX+{}'.format(random.randint(100, 999))

# reCAPTCHA settings
RECAPTCHA_SITE_KEY = os.environ.get('RECAPTCHA_SITE_KEY')
RECAPTCHA_SECRET_KEY = os.environ.get('RECAPTCHA_SECRET_KEY')
RECAPTCHA_VERIFY_URL = "https://www.google.com/recaptcha/api/siteverify"

if not RECAPTCHA_SITE_KEY or not RECAPTCHA_SECRET_KEY:
    print("Warning: reCAPTCHA keys not set. Please set RECAPTCHA_SITE_KEY and RECAPTCHA_SECRET_KEY environment variables.")
    if os.environ.get('FLASK_ENV') == 'development':
        RECAPTCHA_SITE_KEY = "YOUR_SITE_KEY"
        RECAPTCHA_SECRET_KEY = "YOUR_SECRET_KEY"

# Configure download folder
if os.environ.get('FLASK_ENV') == 'production':
    DOWNLOAD_FOLDER = '/tmp/downloads'
else:
    if platform.system() == 'Windows':
        DOWNLOAD_FOLDER = os.path.join(os.environ.get('USERPROFILE', ''), 'Downloads')
    else:
        DOWNLOAD_FOLDER = os.path.join(os.path.expanduser('~'), 'Downloads')

try:
    os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)
except Exception as e:
    print(f"Error setting up download folder: {e}")
    DOWNLOAD_FOLDER = tempfile.mkdtemp()

def get_random_user_agent():
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2.1 Safari/605.1.15',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) Edge/122.0.2365.66',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36'
    ]
    return random.choice(user_agents)

def get_browser_like_headers():
    user_agent = get_random_user_agent()
    return {
        'User-Agent': user_agent,
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Language': 'en-US,en;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Cache-Control': 'max-age=0',
        'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Google Chrome";v="122"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'DNT': '1',
        'Pragma': 'no-cache'
    }

def verify_recaptcha(response):
    try:
        data = {
            'secret': RECAPTCHA_SECRET_KEY,
            'response': response
        }
        r = requests.post(RECAPTCHA_VERIFY_URL, data=data)
        result = r.json()
        return result.get('success', False)
    except Exception as e:
        print(f"reCAPTCHA verification error: {e}")
        return False

def create_cookie_file():
    cookie_file = os.path.join(tempfile.gettempdir(), 'youtube_cookies.txt')
    
    # Create cookie file in Netscape format
    with open(cookie_file, 'w', encoding='utf-8') as f:
        f.write('# Netscape HTTP Cookie File\n')
        f.write('# https://curl.haxx.se/rfc/cookie_spec.html\n')
        f.write('# This file was generated by yt-dlp.  Do not edit.\n\n')
        
        # Current timestamp and one year from now
        current_time = int(datetime.now().timestamp())
        expiry = current_time + 31536000  # 1 year from now
        
        # Add required YouTube cookies
        cookies = [
            # CONSENT cookie
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tCONSENT\t{YOUTUBE_CONSENT}',
            # VISITOR_INFO1_LIVE cookie (helps with player settings)
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tVISITOR_INFO1_LIVE\t{random.randint(10**10, (10**11)-1)}',
            # GPS cookie (location data)
            f'.youtube.com\tTRUE\t/\tFALSE\t{current_time + 3600}\tGPS\t1',
            # PREF cookie (user preferences)
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tPREF\tf6=8&hl=en&f5=30',
        ]
        
        # Write each cookie on a new line
        for cookie in cookies:
            f.write(cookie + '\n')
    
    # Verify the cookie file
    if not os.path.exists(cookie_file):
        raise Exception("Failed to create cookie file")
        
    return cookie_file

@app.route("/", methods=["GET"])
def index():
    return render_template("index.html", recaptcha_site_key=RECAPTCHA_SITE_KEY)

@app.route("/download", methods=["POST"])
def download():
    # Verify reCAPTCHA first
    recaptcha_response = request.form.get('g-recaptcha-response')
    if not recaptcha_response:
        return jsonify({
            "error": "Please complete the reCAPTCHA verification.",
            "details": "reCAPTCHA verification is required"
        })

    if not verify_recaptcha(recaptcha_response):
        return jsonify({
            "error": "reCAPTCHA verification failed. Please try again.",
            "details": "Invalid reCAPTCHA response"
        })

    url = request.form["url"]
    quality = request.form["quality"]

    try:
        download_dir = tempfile.mkdtemp(dir=DOWNLOAD_FOLDER)
        print(f"Download directory: {download_dir}")

        # Create cookie file
        try:
            cookie_file = create_cookie_file()
            print(f"Cookie file created at: {cookie_file}")
        except Exception as e:
            print(f"Error creating cookie file: {e}")
            cookie_file = None

        # Basic options with enhanced browser-like settings
        options = {
            "outtmpl": os.path.join(download_dir, "%(title)s.%(ext)s"),
            "quiet": False,
            "no_warnings": True,
            "extract_flat": False,
            "http_headers": get_browser_like_headers(),
            "nocheckcertificate": True,
            "prefer_insecure": True,
            "sleep_interval": 2,
            "max_sleep_interval": 6,
            "sleep_interval_requests": 2,
            "ignoreerrors": False,
            "no_color": True,
            "geo_bypass": True,
            "geo_bypass_country": "US",
            "socket_timeout": 30,
            "retries": 5,
            "fragment_retries": 10,
            "force_generic_extractor": False,
            "concurrent_fragment_downloads": 1
        }

        if cookie_file:
            options["cookiefile"] = cookie_file
            options["cookiesfrombrowser"] = None

        # Set format based on quality
        if quality == "audio":
            options.update({
                "format": "bestaudio[ext=m4a]/bestaudio/best",
                "postprocessors": [{
                    "key": "FFmpegExtractAudio",
                    "preferredcodec": "mp3",
                    "preferredquality": "192"
                }]
            })
        else:
            format_map = {
                "best": "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best",
                "high": "(bestvideo[height<=720][ext=mp4]//bestvideo[height<=720])+(bestaudio[ext=m4a]/bestaudio)/best[height<=720]",
                "medium": "(bestvideo[height<=480][ext=mp4]//bestvideo[height<=480])+(bestaudio[ext=m4a]/bestaudio)/best[height<=480]",
                "low": "(bestvideo[height<=360][ext=mp4]//bestvideo[height<=360])+(bestaudio[ext=m4a]/bestaudio)/best[height<=360]"
            }
            options["format"] = format_map.get(quality, format_map["best"])

        print("Starting download with options:", options)

        with yt_dlp.YoutubeDL(options) as ydl:
            try:
                # Extract info first with retries
                print(f"Extracting info for URL: {url}")
                max_info_retries = 3
                meta = None
                last_error = None
                
                for attempt in range(max_info_retries):
                    try:
                        meta = ydl.extract_info(url, download=False)
                        if meta:
                            break
                    except Exception as e:
                        last_error = e
                        print(f"Info extraction attempt {attempt + 1} failed: {str(e)}")
                        time.sleep(3 * (attempt + 1))
                
                if not meta:
                    raise last_error or Exception("Could not extract video metadata")

                # Clean title
                title = re.sub(r'[<>:"/\\|?*]', '', meta.get('title', 'video'))[:200]
                
                # Set filename
                if quality == "audio":
                    filename = f"{title}.mp3"
                else:
                    filename = f"{title}.mp4"
                
                options["outtmpl"] = os.path.join(download_dir, filename)
                
                # Download with retry logic
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        print(f"Download attempt {attempt + 1}/{max_retries}")
                        ydl.download([url])
                        break
                    except Exception as e:
                        if attempt == max_retries - 1:
                            raise
                        print(f"Attempt {attempt + 1} failed: {str(e)}")
                        time.sleep(5 * (attempt + 1))
                
                filepath = os.path.join(download_dir, filename)
                if os.path.exists(filepath):
                    print(f"File downloaded successfully: {filepath}")
                    response = send_file(filepath, as_attachment=True)
                    try:
                        os.remove(filepath)
                        os.rmdir(download_dir)
                        if cookie_file:
                            os.remove(cookie_file)
                    except Exception as e:
                        print(f"Cleanup error: {e}")
                    return response
                
                # Fallback: look for any downloaded file
                files = os.listdir(download_dir)
                if files:
                    actual_file = files[0]
                    actual_filepath = os.path.join(download_dir, actual_file)
                    print(f"Using fallback file: {actual_filepath}")
                    response = send_file(actual_filepath, as_attachment=True)
                    try:
                        os.remove(actual_filepath)
                        os.rmdir(download_dir)
                        if cookie_file:
                            os.remove(cookie_file)
                    except Exception as e:
                        print(f"Cleanup error: {e}")
                    return response

                raise Exception("No file found after download")

            except Exception as e:
                if cookie_file:
                    try:
                        os.remove(cookie_file)
                    except:
                        pass
                    
                error_msg = str(e)
                if "Sign in to confirm you're not a bot" in error_msg:
                    error_msg = "YouTube is detecting automated access. Please try again in a few minutes or try a different video."
                print(f"Download error: {error_msg}")
                return jsonify({
                    "error": error_msg,
                    "details": "Try a different video or quality setting"
                })

    except Exception as e:
        print(f"General error: {str(e)}")
        return jsonify({
            "error": str(e),
            "details": "An unexpected error occurred"
        })

@app.route("/get_file/<filename>")
def get_file(filename):
    return "File download method changed", 410

if __name__ == "__main__":
    app.run(debug=True)         