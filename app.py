from flask import Flask, render_template, request, jsonify, send_file
import yt_dlp
import os
import platform
import tempfile
import random
import re
import requests
import time
import json
from datetime import datetime, timedelta
from http.cookiejar import MozillaCookieJar

app = Flask(__name__)

# YouTube consent cookie
YOUTUBE_CONSENT = 'YES+cb.20240318-17-p0.en-GB+FX+{}'.format(random.randint(100, 999))

# reCAPTCHA settings
RECAPTCHA_SITE_KEY = os.environ.get('RECAPTCHA_SITE_KEY')
RECAPTCHA_SECRET_KEY = os.environ.get('RECAPTCHA_SECRET_KEY')
RECAPTCHA_VERIFY_URL = "https://www.google.com/recaptcha/api/siteverify"

if not RECAPTCHA_SITE_KEY or not RECAPTCHA_SECRET_KEY:
    print("Warning: reCAPTCHA keys not set. Please set RECAPTCHA_SITE_KEY and RECAPTCHA_SECRET_KEY environment variables.")
    if os.environ.get('FLASK_ENV') == 'development':
        RECAPTCHA_SITE_KEY = "YOUR_SITE_KEY"
        RECAPTCHA_SECRET_KEY = "YOUR_SECRET_KEY"

# Configure download folder
if os.environ.get('FLASK_ENV') == 'production':
    DOWNLOAD_FOLDER = '/tmp/downloads'
else:
    if platform.system() == 'Windows':
        DOWNLOAD_FOLDER = os.path.join(os.environ.get('USERPROFILE', ''), 'Downloads')
    else:
        DOWNLOAD_FOLDER = os.path.join(os.path.expanduser('~'), 'Downloads')

# Ensure download folder exists
try:
    os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)
except Exception as e:
    print(f"Error creating download folder: {e}")
    DOWNLOAD_FOLDER = tempfile.mkdtemp()
    print(f"Using temporary download folder: {DOWNLOAD_FOLDER}")

# List of free SOCKS5 proxies (update these regularly)
PROXY_LIST = [
    'socks5://51.79.51.246:443',
    'socks5://192.111.137.35:4145',
    'socks5://72.206.181.97:64943',
    'socks5://192.111.139.163:19404',
    'socks5://47.243.95.228:10080'
]

def get_working_proxy():
    """Test and return a working proxy"""
    for proxy in PROXY_LIST:
        try:
            response = requests.get('https://www.youtube.com', 
                                  proxies={'http': proxy, 'https': proxy},
                                  timeout=10)
            if response.status_code == 200:
                return proxy
        except:
            continue
    return None

def get_random_user_agent():
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2.1 Safari/605.1.15',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) Edge/122.0.2365.66',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36'
    ]
    return random.choice(user_agents)

def get_browser_like_headers():
    user_agent = get_random_user_agent()
    chrome_version = "122.0.0.0"
    
    return {
        'User-Agent': user_agent,
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Language': 'en-US,en;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Cache-Control': 'max-age=0',
        'sec-ch-ua': f'"Chromium";v="{chrome_version}", "Google Chrome";v="{chrome_version}", "Not(A:Brand";v="24"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-ch-ua-platform-version': '"15.0.0"',
        'Sec-CH-UA-Arch': '"x86"',
        'Sec-CH-UA-Full-Version': chrome_version,
        'Sec-CH-UA-Full-Version-List': f'"Chromium";v="{chrome_version}", "Google Chrome";v="{chrome_version}", "Not(A:Brand";v="24.0.0.0"',
        'DNT': '1',
        'Pragma': 'no-cache',
        'Priority': 'u=0, i',
        'Origin': 'https://www.youtube.com',
        'Referer': 'https://www.youtube.com/',
        'X-YouTube-Client-Name': '1',
        'X-YouTube-Client-Version': '2.20240321.04.00'
    }

def verify_recaptcha(response):
    try:
        data = {
            'secret': RECAPTCHA_SECRET_KEY,
            'response': response
        }
        r = requests.post(RECAPTCHA_VERIFY_URL, data=data)
        result = r.json()
        return result.get('success', False)
    except Exception as e:
        print(f"reCAPTCHA verification error: {e}")
        return False

def create_cookie_file():
    cookie_file = os.path.join(tempfile.gettempdir(), 'youtube_cookies.txt')
    
    # Create cookie file in Netscape format
    with open(cookie_file, 'w', encoding='utf-8') as f:
        f.write('# Netscape HTTP Cookie File\n')
        f.write('# https://curl.haxx.se/rfc/cookie_spec.html\n')
        f.write('# This file was generated by yt-dlp.  Do not edit.\n\n')
        
        # Current timestamp and one year from now
        current_time = int(datetime.now().timestamp())
        expiry = current_time + 31536000  # 1 year from now
        
        # Add required YouTube cookies
        cookies = [
            # CONSENT cookie
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tCONSENT\t{YOUTUBE_CONSENT}',
            # VISITOR_INFO1_LIVE cookie
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tVISITOR_INFO1_LIVE\t{random.randint(10**10, (10**11)-1)}',
            # GPS cookie
            f'.youtube.com\tTRUE\t/\tFALSE\t{current_time + 3600}\tGPS\t1',
            # PREF cookie
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tPREF\tf6=8&hl=en&f5=30000',
            # YSC cookie
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tYSC\t{random.randint(10**10, (10**11)-1)}',
            # Additional cookies
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tLOGIN_INFO\tdummy_token',
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tSAPISID\t{random.randint(10**10, (10**11)-1)}',
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tSID\tdummy_sid',
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tSSID\t{random.randint(10**10, (10**11)-1)}',
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tHSID\t{random.randint(10**10, (10**11)-1)}',
            f'.youtube.com\tTRUE\t/\tFALSE\t{expiry}\tAEC\t{random.randint(10**10, (10**11)-1)}'
        ]
        
        # Write each cookie on a new line
        for cookie in cookies:
            f.write(cookie + '\n')
    
    # Verify the cookie file
    if not os.path.exists(cookie_file):
        raise Exception("Failed to create cookie file")
        
    return cookie_file

@app.route("/", methods=["GET"])
def index():
    return render_template("index.html", recaptcha_site_key=RECAPTCHA_SITE_KEY)

@app.route("/download", methods=["POST"])
def download():
    # Verify reCAPTCHA first
    recaptcha_response = request.form.get('g-recaptcha-response')
    if not recaptcha_response:
        return jsonify({
            "error": "Please complete the reCAPTCHA verification.",
            "details": "reCAPTCHA verification is required"
        })

    if not verify_recaptcha(recaptcha_response):
        return jsonify({
            "error": "reCAPTCHA verification failed. Please try again.",
            "details": "Invalid reCAPTCHA response"
        })

    url = request.form["url"]
    quality = request.form["quality"]

    try:
        # Create a unique download directory
        download_dir = tempfile.mkdtemp(dir=DOWNLOAD_FOLDER)
        print(f"Download directory: {download_dir}")

        # Basic options for initial info extraction
        info_options = {
            "quiet": True,
            "no_warnings": True,
            "extract_flat": True,
            "http_headers": get_browser_like_headers()
        }

        # First get video info
        with yt_dlp.YoutubeDL(info_options) as ydl:
            try:
                print(f"Extracting info for URL: {url}")
                meta = ydl.extract_info(url, download=False)
                if not meta:
                    raise Exception("Could not extract video metadata")

                # Get and clean video title
                video_title = meta.get('title', '')
                if not video_title:
                    video_title = f"youtube_video_{int(time.time())}"
                video_title = re.sub(r'[<>:"/\\|?*]', '', video_title)
                video_title = video_title.strip()[:200]

                # Set up download options based on quality
                if quality == "audio":
                    output_file = os.path.join(download_dir, f"{video_title}.mp3")
                    download_options = {
                        "format": "bestaudio/best",
                        "outtmpl": output_file,
                        "postprocessors": [{
                            "key": "FFmpegExtractAudio",
                            "preferredcodec": "mp3",
                            "preferredquality": "192",
                        }],
                        "http_headers": get_browser_like_headers(),
                        "quiet": False
                    }
                else:
                    output_file = os.path.join(download_dir, f"{video_title}.mp4")
                    format_str = {
                        "best": "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best",
                        "high": "bestvideo[height<=720][ext=mp4]+bestaudio[ext=m4a]/best[height<=720]",
                        "medium": "bestvideo[height<=480][ext=mp4]+bestaudio[ext=m4a]/best[height<=480]",
                        "low": "bestvideo[height<=360][ext=mp4]+bestaudio[ext=m4a]/best[height<=360]"
                    }.get(quality, "best")

                    download_options = {
                        "format": format_str,
                        "outtmpl": output_file,
                        "http_headers": get_browser_like_headers(),
                        "merge_output_format": "mp4",
                        "quiet": False
                    }

                # Perform the download
                with yt_dlp.YoutubeDL(download_options) as downloader:
                    print(f"Starting download with options: {download_options}")
                    downloader.download([url])

                # Verify the downloaded file
                if not os.path.exists(output_file):
                    raise Exception("Download failed - file not found")

                file_size = os.path.getsize(output_file)
                if file_size == 0:
                    raise Exception("Download failed - empty file")

                print(f"File downloaded successfully: {output_file} ({file_size} bytes)")

                # Send the file
                try:
                    response = send_file(
                        output_file,
                        as_attachment=True,
                        download_name=os.path.basename(output_file),
                        mimetype='audio/mpeg' if quality == "audio" else 'video/mp4'
                    )

                    # Clean up after sending
                    @response.call_on_close
                    def cleanup():
                        try:
                            if os.path.exists(output_file):
                                os.remove(output_file)
                            if os.path.exists(download_dir):
                                os.rmdir(download_dir)
                        except Exception as e:
                            print(f"Cleanup error: {e}")

                    return response

                except Exception as e:
                    print(f"Error sending file: {e}")
                    raise

            except Exception as e:
                error_msg = str(e)
                if "Sign in to confirm you're not a bot" in error_msg:
                    error_msg = "YouTube is detecting automated access. Please try again in a few minutes."
                print(f"Download error: {error_msg}")
                
                # Clean up on error
                try:
                    if os.path.exists(download_dir):
                        import shutil
                        shutil.rmtree(download_dir)
                except:
                    pass
                
                return jsonify({
                    "error": error_msg,
                    "details": "Try a different video or quality setting"
                })

    except Exception as e:
        print(f"General error: {str(e)}")
        return jsonify({
            "error": str(e),
            "details": "An unexpected error occurred"
        })

@app.route("/get_file/<filename>")
def get_file(filename):
    return "File download method changed", 410

if __name__ == "__main__":
    app.run(debug=True)         